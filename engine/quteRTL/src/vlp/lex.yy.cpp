/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 197
#define YY_END_OF_BUFFER 198
static yyconst short int yy_accept[742] =
    {   0,
        0,    0,    0,    0,    0,    0,   44,   44,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  198,  196,    1,    2,
      196,   80,  196,  196,  196,  196,  196,  196,  196,  191,
      196,  196,  196,  196,  187,  188,  196,  196,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  196,  196,
        9,   10,    9,    9,   11,    9,   44,  197,  197,   47,
       48,   51,   52,   51,   37,   38,   37,   19,   13,   20,
       19,   19,   19,   19,   26,   21,   27,   26,   26,   26,

       29,   30,   29,   29,   33,   34,   33,   63,   64,   63,
       63,   63,   63,   63,   42,   41,  197,    1,   72,   80,
      185,  185,   67,    0,    0,    0,    0,   82,  148,  189,
        6,    5,    0,  190,  191,  191,   77,  126,   66,   70,
      121,   65,   78,   79,  187,  188,   73,  186,  186,  186,
      186,  186,  186,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  114,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  134,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
       68,   75,   74,   76,   12,    0,    0,   44,    0,   45,
       47,   48,    0,   36,   35,   13,   18,    0,    0,    0,
       21,    0,    0,    0,   31,    0,    0,    4,    3,    0,
        0,    0,    0,   42,   41,   40,   71,  185,    0,  192,
        0,  194,    0,  195,    0,  193,  189,  189,  189,   69,
      186,  186,  186,  186,  186,  186,  186,  186,  187,   83,
      187,  187,   86,  187,  187,  187,  187,  187,  187,  187,
       99,  187,  108,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  130,  131,

      187,  187,  187,  187,  187,  187,  187,  187,  146,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  169,  187,  187,  187,  187,  187,  187,
      181,  187,  183,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       40,  185,  192,  194,  195,  193,  189,  189,  186,  186,
      186,  186,  186,  186,  186,  187,  187,  187,  187,   89,
       92,  187,  187,  187,  187,   97,   98,  187,  187,  187,
      187,  187,  187,  187,  187,  110,  187,  187,  187,  187,
      187,  187,  119,  187,  187,  187,  187,  125,  127,  187,

      129,  187,  187,  187,  137,  187,  187,  187,  187,  145,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  164,  165,  166,  170,  171,  187,  187,  187,  175,
      176,  187,  187,  180,  182,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  185,  186,  186,   53,  186,  186,  186,  186,
      186,  187,  187,   85,  187,   90,   91,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  107,  187,  187,
      187,  187,  116,  117,  187,  120,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  140,  141,  187,  187,  144,

      187,  149,  150,  151,  187,  155,  187,  187,  187,  187,
      162,  163,  187,  187,  173,  187,  177,  178,  179,    0,
        0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,   58,    0,    0,  184,  186,  186,  186,
       54,   46,  186,  186,   81,   84,   87,   88,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  112,  113,  187,  187,  187,  123,  124,  187,  132,
      133,  135,  187,  187,  187,  187,  143,  147,  187,  187,
      187,  187,  187,  187,  187,  172,  187,    0,    0,   50,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   59,

        0,  186,   39,  186,  186,  186,  187,   94,  187,   96,
      100,  187,  187,  187,  187,  187,  106,  109,  187,  115,
      118,  187,  128,  187,  138,  187,  187,  187,  187,  156,
      187,  158,  159,  160,  161,  167,  168,  187,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      186,  186,  186,  186,   93,   95,  187,  187,  187,  187,
      105,  111,  187,  187,  187,  142,  152,  153,  154,  187,
      174,    7,    8,    0,    0,    0,    0,    0,    0,   28,
       32,    0,    0,  186,  186,    0,   43,  186,  187,  102,
      187,  187,  187,  136,  139,  157,   17,    0,    0,   25,

        0,    0,   62,   61,  186,  186,   55,  187,  187,  104,
      187,    0,    0,    0,    0,   56,  186,   55,   55,  101,
      187,  122,    0,    0,    0,    0,  186,  103,    0,    0,
       15,    0,    0,   23,  186,   16,   14,   24,   22,   57,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    8,    1,
        1,    9,    1,    1,   10,   11,   12,   13,   14,   15,
       15,   15,   15,   15,   15,   16,   16,   17,    1,   18,
       19,   20,   21,    1,   22,   23,   22,   24,   22,   22,
       25,   26,   25,   25,   25,   25,   25,   25,   27,   25,
       25,   25,   25,   25,   25,   25,   25,   28,   25,   28,
        1,   29,    1,   30,   31,   32,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   25,   49,   50,   51,   52,   53,   54,   55,
       56,   57,    1,   58,    1,   59,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    1,    1,    1,
        1,    1,    6,    6,    6,    7,    1,    1,    1,    1,
        8,    9,    9,    9,   10,   10,   10,   11,    1,    1,
       12,    1,    9,    9,    9,    9,    9,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   11,   10,   11,    1,    1
    } ;

static yyconst short int yy_base[767] =
    {   0,
        0,    0,   57,   58,   59,   60, 1247, 1246,  110,    0,
       61,   62,   65,   66,  168,  170,  172,  179,  175,  182,
      183,  184,  199,  201,  249,    0, 1250, 1253, 1247, 1253,
     1229,    0, 1197, 1239,   48, 1225, 1224,   76,   61,  181,
       61,   67,   77, 1226,    0,    0, 1183,  164,   54,  146,
      143,   62,  178,   29, 1200,  191, 1193, 1206,  276,  277,
       53,  282,  282,  291,  299, 1201,  313,  197, 1179,  305,
     1253, 1253, 1224, 1179, 1253, 1178,    0,  318, 1253, 1231,
        0, 1253, 1253, 1195, 1253, 1253,  181, 1253, 1229, 1253,
     1218, 1177, 1195, 1178, 1253, 1224, 1253, 1173, 1191, 1174,

     1253, 1253, 1210, 1165, 1253, 1253, 1164, 1253, 1253,  329,
     1173, 1172, 1165, 1183, 1213,    0,    0, 1212, 1194,    0,
        0, 1175, 1253,  353,  355,  349,  359, 1253, 1253,  362,
     1253, 1253,  356,  371,  386,  398, 1253, 1253, 1253, 1192,
     1253, 1253, 1253, 1253,    0,    0, 1253,    0, 1173, 1172,
      163,  326, 1167, 1153, 1170, 1155, 1165, 1165, 1152, 1154,
       68, 1150, 1160, 1148, 1161, 1159, 1146, 1148, 1154,    0,
      374, 1151, 1142, 1155, 1153, 1152, 1150, 1140, 1146, 1137,
      177,    0, 1132, 1133, 1134, 1130, 1138, 1134, 1132,  356,
     1131, 1130, 1125, 1140, 1139, 1134, 1121, 1121, 1127,  315,

     1122,  383, 1131,  270, 1132, 1123, 1114, 1113, 1114, 1111,
     1253, 1253, 1253, 1253, 1253, 1113, 1112,    0,  416, 1253,
     1155,    0,  195, 1253, 1253, 1154, 1253, 1111, 1105, 1120,
     1150, 1107, 1101, 1116, 1253, 1102, 1101, 1253, 1253, 1110,
      379, 1094, 1095, 1141,    0,    0, 1253, 1091,  428,  419,
      449,  422,  441,    0,  443,  456,  444,  465,  475, 1253,
        0, 1097, 1102, 1089, 1102, 1101, 1101, 1090, 1101,    0,
     1092, 1091, 1090, 1093, 1079, 1078,  311, 1094, 1089, 1088,
      457, 1078,  391, 1088, 1082, 1070, 1068, 1067, 1081, 1071,
     1077, 1066, 1073, 1061, 1073, 1075, 1073, 1059,    0, 1067,

     1059, 1073, 1055, 1067, 1058, 1058, 1054, 1056,    0, 1062,
     1051, 1050, 1063, 1051, 1050, 1058, 1045, 1043, 1041, 1045,
     1045, 1050, 1040,  453, 1034, 1033, 1047, 1039, 1037, 1043,
        0, 1030,    0, 1031, 1030, 1026, 1039, 1030, 1040, 1026,
     1027, 1037, 1023, 1021, 1020, 1021, 1013, 1012, 1015, 1029,
        0, 1009,  496,  505,    0,  501,  524,  528, 1016, 1018,
     1021,  413, 1020, 1012, 1018,  998, 1014, 1006, 1013,  350,
        0, 1000,  997, 1015, 1013,    0,    0, 1013,  993,  997,
      994,  994, 1008,  989,  986,    0,  987,  980,  995,  984,
      983,  994,    0,  995,  984,  978,  985,    0,    0,  992,

        0,  989,  974,  980,    0,  988,  982,  512,  972,    0,
      988,  970,  969,  972,  980,  972,  350,  969,  970,  976,
      975,    0,    0,  970,    0,    0,  964,  960,  961,    0,
        0,  459,  970,    0,    0,  958,  957,  967,  962,  971,
      957,  950,  968,  954,  947,  948,  947,  947,  942,  941,
      939,  945,  941,  952,  941,    0,  949,  947,  946,  931,
      932,  931,  934,    0,  480,    0,    0,  938,  934,  928,
      932,  925,  928,  937,  931,  934,  389,    0,  933,  928,
      484,  935,    0,    0,  930,    0,  921,  920,  927,  924,
      490,  911,  924,  921,  908,    0,    0,  911,  909,    0,

      905,    0,    0,  914,  905,    0,  915,  919,  912,  894,
        0,    0,  911,  912,    0,  898,    0,    0,    0,  896,
      895, 1253,  906,  908,  898,  897,  905,  895,  894,  887,
      886,  899, 1253, 1253,  883,  896,    0,  895,  894,  886,
        0,    0,  893,  884,    0,    0,    0,    0,  868,  851,
      860,  848,  843,  844,  825,  830,  839,  826,  822,  815,
      806,    0,    0,  801,  784,  769,    0,    0,  778,    0,
        0,    0,  758,  757,  639,  625,    0,    0,  640,  640,
      620,  626,  517,  520,  532,    0,  637,  617,  616, 1253,
      638,  633,  636,  635,  630,  633,  609,  608,  611, 1253,

      611,  623,    0,  616,  622,  625,  611,    0,  611,    0,
        0,  603,  607,  609,  608,  611,    0,    0,  601,    0,
        0,  610,    0,  608,    0,  586,  592,  536,  601,    0,
      603,    0,    0,    0,    0,    0,    0,  593,  576,  571,
      570,  575,  567,  567,  572,  564,  564,  563,  568,  574,
      569,  573,  552,  564,    0,    0,  566,  569,  554,  566,
        0,    0,  551,  553,  564,    0,    0,    0,    0,  555,
        0, 1253, 1253,  562,  567,  560,  558,  561,  554, 1253,
     1253,  553,  540,  542,  550,  558, 1253,  543,  532,    0,
      536,  511,  517,    0,    0,    0, 1253,  517,  516, 1253,

      500,  497, 1253, 1253,  486,  474,  564,  455,  446,    0,
      445,  435,  414,  422,  373,    0,  347,    0,  623,    0,
      336,    0,  297,  524,  287,  540,  272,    0,  208,  197,
     1253,  166,  142, 1253,   46, 1253, 1253, 1253, 1253,    0,
     1253,  682,  694,  706,  718,  730,  742,  754,  766,  778,
      790,  794,  801,  813,  817,  829,  837,  845,  849,  860,
      870,  877,  885,  892,  904,  916
    } ;

static yyconst short int yy_def[767] =
    {   0,
      741,    1,  742,  742,  742,  742,  743,  743,  741,    9,
      744,  744,  745,  745,  746,  746,  747,  747,  748,  748,
      749,  749,  750,  750,  741,   25,  741,  741,  741,  741,
      741,  751,  752,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  753,  754,  741,  755,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  741,  741,
      741,  741,  741,  741,  741,  741,  756,  741,  741,  741,
      757,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  758,  759,  741,  741,  751,
      752,  752,  741,  741,  741,  760,  761,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  753,  754,  741,  762,  762,  762,
      762,  762,  762,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      741,  741,  741,  741,  741,  741,  741,  756,  741,  741,
      741,  757,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  758,  763,  741,  752,  741,  741,
      741,  741,  760,  764,  761,  741,  741,  741,  741,  741,
      762,  762,  762,  762,  762,  762,  762,  762,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      763,  752,  741,  741,  764,  741,  741,  741,  762,  762,
      762,  762,  762,  762,  762,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  752,  762,  762,  762,  762,  762,  762,  762,
      762,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  752,  762,  762,  762,
      762,  762,  762,  762,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  762,  762,  762,  762,  762,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      762,  762,  762,  762,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  762,  762,  741,  741,  762,  753,  753,
      753,  753,  753,  753,  753,  753,  741,  741,  741,  741,

      741,  741,  741,  741,  762,  762,  765,  753,  753,  753,
      753,  741,  741,  741,  741,  762,  762,  766,  765,  753,
      753,  753,  741,  741,  741,  741,  762,  753,  741,  741,
      741,  741,  741,  741,  762,  741,  741,  741,  741,  762,
        0,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741
    } ;

static yyconst short int yy_nxt[1313] =
    {   0,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   40,   28,   41,   42,   43,
       44,   45,   45,   45,   45,   45,   45,   45,   46,   47,
       45,   48,   49,   50,   51,   52,   53,   54,   45,   55,
       56,   57,   45,   58,   59,   60,   61,   62,   63,   64,
       65,   45,   66,   67,   68,   45,   45,   69,   70,   72,
       72,   75,   75,   83,   83,   73,   73,   86,   86,  131,
      124,  125,  132,  126,  127,  167,   87,   87,  137,  138,
      168,  124,  740,  125,  139,  140,  141,  126,  130,  130,
      130,  130,   84,   84,  127,  142,  143,  154,  161,  155,

      276,  182,  162,  156,  183,  277,   74,   74,   76,   76,
       79,   80,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   81,   81,   81,   81,   81,   81,   81,   79,   79,
       81,   79,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   79,   79,   89,
       90,   89,   90,   96,   97,  159,   91,  102,   91,  739,
       96,   97,  157,  103,  102,  106,  106,  160,  133,  224,
      103,  134,  225,  135,  135,  135,  135,  158,  149,  150,

      151,  109,  738,  109,  152,   92,  264,   92,  265,   98,
      110,  136,  110,  163,  153,   93,   98,   93,   94,   99,
       94,  164,  100,  165,  104,  299,   99,  300,  170,  100,
      166,  104,  107,  107,  737,  111,  171,  111,  336,  112,
      337,  112,  209,  210,  736,  113,  114,  113,  114,   79,
      115,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
      116,  116,  116,  116,  116,  116,  116,   79,   79,  116,
      117,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  116,   79,   79,  174,  178,
      326,  212,  175,  179,  184,  327,  189,  735,  190,  219,
      220,  180,  176,  181,  177,  194,  185,  191,  186,  192,
      187,  200,  193,  188,  213,  195,  732,  238,  196,  201,
      239,  197,  198,  373,  199,  204,  729,  202,  320,  205,
      253,  253,  206,  207,  249,  249,  251,  251,  374,  208,
      255,  255,  214,  266,  321,  250,  250,  252,  252,  252,
      252,  267,  728,  250,  257,  257,  257,  257,  124,  125,
      250,  126,  127,  259,  259,  259,  259,  727,  308,  124,
      507,  125,  258,  133,  309,  126,  134,  508,  135,  135,

      135,  135,  127,  310,  466,  133,  467,  250,  134,  250,
      135,  135,  135,  135,  286,  323,  136,  219,  220,  726,
      287,  288,  558,  324,  289,  347,  348,  385,  136,  249,
      249,  353,  353,  386,  354,  354,  354,  354,  559,  353,
      250,  250,  253,  253,  255,  255,  353,  457,  250,  353,
      251,  251,  354,  458,  725,  250,  257,  257,  257,  257,
      724,  252,  252,  252,  252,  425,  426,  723,  356,  356,
      356,  517,  518,  353,  258,  353,  356,  257,  257,  257,
      257,  722,  250,  356,  250,  427,  356,  357,  357,  357,
      357,  378,  547,  548,  379,  258,  562,  563,  721,  428,

      720,  380,  570,  571,  381,  358,  382,  383,  353,  353,
      356,  717,  356,  356,  356,  356,  353,  354,  354,  354,
      354,  356,  716,  353,  496,  497,  353,  715,  356,  632,
      633,  356,  634,  635,  714,  354,  357,  357,  357,  357,
      357,  357,  357,  357,  636,  637,  713,  498,  667,  668,
      353,  712,  353,  686,  358,  356,  687,  356,  358,  686,
      711,  730,  687,  499,  718,  718,  710,  718,  718,  731,
      718,  718,  718,  718,  718,  718,  709,  733,  708,  707,
      718,  718,  718,  718,  718,  734,  706,  705,  704,  703,
      702,  701,  718,  718,  700,  718,  699,  698,  697,  696,

      695,  694,  693,  692,  691,  690,  689,  688,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  718,  718,  718,  718,  672,  718,  718,  671,  718,
      718,  718,  718,  718,  718,  670,  669,  666,  665,  718,
      718,  718,  718,  718,  664,  663,  662,  661,  660,  659,
      658,  718,  718,  657,  718,  656,  655,  654,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  643,  642,
      641,  640,  639,  638,  631,  630,  629,  628,  627,  626,
      718,  718,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      120,  120,  120,  625,  120,  120,  120,  120,  120,  120,

      120,  120,  121,  121,  121,  145,  145,  145,  624,  145,
      145,  145,  145,  146,  623,  622,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  148,  148,  148,  148,  218,
      218,  218,  621,  218,  218,  218,  218,  218,  218,  218,
      218,  222,  222,  222,  620,  222,  222,  222,  222,  245,
      245,  245,  619,  245,  245,  245,  245,  246,  246,  246,
      246,  254,  254,  618,  617,  254,  254,  254,  254,  616,
      254,  256,  256,  615,  614,  256,  613,  256,  612,  611,
      256,  261,  261,  261,  610,  261,  261,  261,  261,  351,
      351,  351,  609,  351,  351,  351,  351,  355,  355,  355,

      355,  608,  355,  355,  719,  719,  607,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  718,  718,  606,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  569,  568,  567,  566,  565,  564,  561,  560,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,

      525,  524,  523,  522,  521,  520,  519,  516,  515,  514,
      513,  512,  511,  510,  509,  506,  505,  504,  503,  502,
      501,  500,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      465,  464,  463,  462,  461,  460,  459,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,

      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  384,  377,  376,  375,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  352,  244,  350,  349,  346,  345,  344,  343,  342,
      341,  231,  340,  339,  338,  226,  221,  335,  334,  333,
      332,  331,  330,  329,  328,  325,  322,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  307,  306,  305,  304,
      303,  302,  301,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  285,  284,  283,  282,  281,  280,  279,  278,

      275,  274,  273,  272,  271,  270,  269,  268,  263,  262,
      260,  248,  247,  118,  244,  243,  242,  241,  240,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  223,  221,  217,  216,  215,  211,  203,  173,  172,
      169,  147,  144,  129,  128,  123,  122,  119,  118,  741,
       78,   78,   27,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741
    } ;

static yyconst short int yy_chk[1313] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    6,   11,   12,    3,    4,   13,   14,   39,
       35,   35,   39,   35,   35,   54,   13,   14,   41,   41,
       54,   35,  735,   35,   42,   42,   42,   35,   38,   38,
       38,   38,   11,   12,   35,   43,   43,   49,   52,   49,

      161,   61,   52,   49,   61,  161,    3,    4,    5,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   15,
       15,   16,   16,   17,   17,   51,   15,   19,   16,  733,
       18,   18,   50,   19,   20,   21,   22,   51,   40,   87,
       20,   40,   87,   40,   40,   40,   40,   50,   48,   48,

       48,   23,  732,   24,   48,   15,  151,   16,  151,   17,
       23,   40,   24,   53,   48,   15,   18,   16,   15,   17,
       16,   53,   17,   53,   19,  181,   18,  181,   56,   18,
       53,   20,   21,   22,  730,   23,   56,   24,  223,   23,
      223,   24,   68,   68,  729,   23,   23,   24,   24,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   59,   60,
      204,   70,   59,   60,   62,  204,   63,  727,   63,   78,
       78,   60,   59,   60,   59,   64,   62,   63,   62,   63,
       62,   65,   63,   62,   70,   64,  725,  110,   64,   65,
      110,   64,   64,  277,   64,   67,  723,   65,  200,   67,
      126,  126,   67,   67,  124,  124,  125,  125,  277,   67,
      127,  127,   70,  152,  200,  124,  124,  125,  125,  125,
      125,  152,  721,  124,  130,  130,  130,  130,  133,  133,
      124,  133,  133,  134,  134,  134,  134,  717,  190,  133,
      417,  133,  130,  135,  190,  133,  135,  417,  135,  135,

      135,  135,  133,  190,  370,  136,  370,  124,  136,  124,
      136,  136,  136,  136,  171,  202,  135,  219,  219,  715,
      171,  171,  477,  202,  171,  241,  241,  283,  136,  249,
      249,  250,  250,  283,  252,  252,  252,  252,  477,  250,
      249,  249,  253,  253,  255,  255,  250,  362,  249,  250,
      251,  251,  252,  362,  714,  249,  257,  257,  257,  257,
      713,  251,  251,  251,  251,  324,  324,  712,  256,  256,
      256,  432,  432,  250,  257,  250,  256,  258,  258,  258,
      258,  711,  249,  256,  249,  324,  256,  259,  259,  259,
      259,  281,  465,  465,  281,  258,  481,  481,  709,  324,

      708,  281,  491,  491,  281,  259,  281,  281,  353,  353,
      256,  706,  256,  356,  356,  356,  353,  354,  354,  354,
      354,  356,  705,  353,  408,  408,  353,  702,  356,  583,
      583,  356,  584,  584,  701,  354,  357,  357,  357,  357,
      358,  358,  358,  358,  585,  585,  699,  408,  628,  628,
      353,  698,  353,  653,  357,  356,  653,  356,  358,  686,
      693,  724,  686,  408,  707,  707,  692,  707,  707,  724,
      707,  707,  707,  707,  707,  707,  691,  726,  689,  688,
      707,  707,  707,  707,  707,  726,  685,  684,  683,  682,
      679,  678,  707,  707,  677,  707,  676,  675,  674,  670,

      665,  664,  663,  660,  659,  658,  657,  654,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  707,  707,  719,  719,  639,  719,  719,  638,  719,
      719,  719,  719,  719,  719,  631,  629,  627,  626,  719,
      719,  719,  719,  719,  624,  622,  619,  616,  615,  614,
      613,  719,  719,  612,  719,  609,  607,  606,  605,  604,
      602,  601,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  589,  588,  587,  582,  581,  580,  579,  576,  575,
      719,  719,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      751,  751,  751,  574,  751,  751,  751,  751,  751,  751,

      751,  751,  752,  752,  752,  753,  753,  753,  573,  753,
      753,  753,  753,  754,  569,  566,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  755,  755,  755,  755,  756,
      756,  756,  565,  756,  756,  756,  756,  756,  756,  756,
      756,  757,  757,  757,  564,  757,  757,  757,  757,  758,
      758,  758,  561,  758,  758,  758,  758,  759,  759,  759,
      759,  760,  760,  560,  559,  760,  760,  760,  760,  558,
      760,  761,  761,  557,  556,  761,  555,  761,  554,  553,
      761,  762,  762,  762,  552,  762,  762,  762,  762,  763,
      763,  763,  551,  763,  763,  763,  763,  764,  764,  764,

      764,  550,  764,  764,  765,  765,  549,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  766,  766,  544,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  543,  540,
      539,  538,  536,  535,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  521,  520,  516,  514,  513,  510,
      509,  508,  507,  505,  504,  501,  499,  498,  495,  494,
      493,  492,  490,  489,  488,  487,  485,  482,  480,  479,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  463,
      462,  461,  460,  459,  458,  457,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,

      441,  440,  439,  438,  437,  436,  433,  429,  428,  427,
      424,  421,  420,  419,  418,  416,  415,  414,  413,  412,
      411,  409,  407,  406,  404,  403,  402,  400,  397,  396,
      395,  394,  392,  391,  390,  389,  388,  387,  385,  384,
      383,  382,  381,  380,  379,  378,  375,  374,  373,  372,
      369,  368,  367,  366,  365,  364,  363,  361,  360,  359,
      352,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  332,  330,
      329,  328,  327,  326,  325,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  308,

      307,  306,  305,  304,  303,  302,  301,  300,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  282,  280,  279,  278,  276,  275,  274,
      273,  272,  271,  269,  268,  267,  266,  265,  264,  263,
      262,  248,  244,  243,  242,  240,  237,  236,  234,  233,
      232,  231,  230,  229,  228,  226,  221,  217,  216,  210,
      209,  208,  207,  206,  205,  203,  201,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  189,  188,  187,  186,
      185,  184,  183,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  169,  168,  167,  166,  165,  164,  163,  162,

      160,  159,  158,  157,  156,  155,  154,  153,  150,  149,
      140,  122,  119,  118,  115,  114,  113,  112,  111,  107,
      104,  103,  100,   99,   98,   96,   94,   93,   92,   91,
       89,   84,   80,   76,   74,   73,   69,   66,   58,   57,
       55,   47,   44,   37,   36,   34,   33,   31,   29,   27,
        8,    7,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "vlpLex.l"
#define INITIAL 0
#line 2 "vlpLex.l"
/****************************************************************************
  FileName     [ vlpLex.l ]
  Package      [ vlp ]
  Synopsis     [ vl2cdfg: Verilog to CDFG Translator 
                 Lexical Scanner for Verilog ]
  Author       [ Hu-Hsi(Louis)Yeh ]
  Copyright    [ Copyleft(c) 2005 LaDs(III), GIEE, NTU, Taiwan ]
****************************************************************************/

#include "VLGlobe.h"
#include "vlpDesign.h"
#include "y.tab.h"
#include "vlpStack.h"
#include "myFileUtil.h"
#include <string>
#include <iostream>
#include <cassert>
#include <stack>

//=================pure parser====================//
//#undef YY_DECL
//#define YY_DECL int yylex(YYSTYPE* yylval)

//=================pure parser====================//

//=================pure parser====================//
//union YYSTYPE;
//YYSTYPE yylval;
//=================pure parser====================//

using namespace std;

//forward declare
extern LY_usage* LY;
char* processWhite(char* const str);
void parseInclude(const char* file);

/*Space1 is adder by louis*/
#define COMMENT 1

#define COMMENT_L 2

#define INCLUDE 3

#define IFDEF 4

#define MARKED 5

#define MARKED_S 6

#define DIRECTIVE 7

#define DIRECTIVE_L 8

#define TRAN_OFF 9

#define TRAN_OFF_L 10

#define LIBRARY 11

#define DEFINE 12

#line 975 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 69 "vlpLex.l"


#line 1129 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 742 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1253 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "vlpLex.l"
{ LY->colNo = LY->colNo + strlen(yytext); continue; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "vlpLex.l"
{ 
                     (LY->lineNo)++;
                     LY->colNo = 1;
                     if (LY->defState) {
                        BEGIN 0;
                        LY->defState = false;
                        if (LY->defCount == 1) 
                           return YYDEF_NULL; 
                        else
                           continue;                              
                     }                            
                     else 
                        continue; 
                     LY->defCount = 0;
                  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 88 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN COMMENT_L; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN COMMENT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 90 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN COMMENT_L; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 91 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN COMMENT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "vlpLex.l"
{ if (LY->blackBox == false) BEGIN DIRECTIVE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "vlpLex.l"
{ if (LY->blackBox == false) BEGIN DIRECTIVE_L; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 96 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; continue; }            
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1;
                       if (LY->blackBox == true && LY->vLibComment == false && LY->modStart == true) 
                          BEGIN LIBRARY; 
                       else 
                          BEGIN 0;
                       
                     }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 106 "vlpLex.l"
{ (LY->colNo)+=2; 
                       if (LY->blackBox == true && LY->vLibComment == false && LY->modStart == true) 
                          BEGIN LIBRARY; 
                       else 
                          BEGIN 0; 
                     }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "vlpLex.l"
{ BEGIN TRAN_OFF; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "vlpLex.l"
{ BEGIN COMMENT;  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "vlpLex.l"
{ return PARALLEL_CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "vlpLex.l"
{ return FULL_CASE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN 0; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "vlpLex.l"
{ (LY->colNo)++; BEGIN COMMENT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; BEGIN COMMENT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "vlpLex.l"
{ BEGIN TRAN_OFF_L; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "vlpLex.l"
{ BEGIN COMMENT_L;  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "vlpLex.l"
{ return PARALLEL_CASE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "vlpLex.l"
{ return FULL_CASE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "vlpLex.l"
{ (LY->colNo)++; BEGIN COMMENT_L; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; BEGIN 0; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 130 "vlpLex.l"
{ BEGIN DIRECTIVE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 131 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 132 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; continue; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 133 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN MARKED_S; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 135 "vlpLex.l"
{ BEGIN DIRECTIVE_L; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 137 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; BEGIN MARKED_S; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 139 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN TRAN_OFF_L; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 140 "vlpLex.l"
{ (LY->colNo)+=2; BEGIN TRAN_OFF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 141 "vlpLex.l"
{ (LY->colNo)++; continue; }                    
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 142 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; continue; }            
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 144 "vlpLex.l"
{ (LY->colNo)+=7; 
                     BEGIN DEFINE;
                     LY->defState = true;
                     LY->defCount = 0;
                     return YYDEFINE; 
                   
   /*
   `include{Space}*\" { BEGIN INCLUDE; colNo+= strlen(yytext); continue; }
   <INCLUDE>[^\"]*    { BEGIN 0; parseInclude(yytext); BEGIN INCLUDE; continue; }
   <INCLUDE>[\"]{Space}*\n  { cout << "================hit===============" << endl; lineNo++; colNo = 1; BEGIN 0; }
   */
                   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 157 "vlpLex.l"
{  
                                 LY->colNo = (LY->colNo) + strlen(yytext);               
                                 LY->yyid = yytext+1; //ignore the char '`'
                                 yylval.stringPtr = &(LY->yyid);
                                 (LY->defCount)++;
                                 BEGIN 0;
                                 return YYDEF_ID;
                              }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "vlpLex.l"
{
                                 LY->colNo = (LY->colNo) + strlen(yytext);               
                                 LY->yyid = yytext;
                                 yylval.stringPtr = &(LY->yyid);
                                 (LY->defCount)++;
                                 BEGIN 0;
                                 return YYID;
                              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "vlpLex.l"
{ BEGIN INCLUDE; (LY->colNo)+= strlen(yytext); continue; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "vlpLex.l"
{ LY->yyid = yytext; continue; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; parseInclude(LY->yyid.c_str()); BEGIN 0; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "vlpLex.l"
{ BEGIN IFDEF; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 180 "vlpLex.l"
{ LY->colNo = (LY->colNo) + strlen(yytext); continue; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 182 "vlpLex.l"
{  if (LY->defineMap.exist(yytext))
                                   BEGIN 0;
                                else
                                   BEGIN MARKED;
                             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 187 "vlpLex.l"
{ BEGIN 0; } 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "vlpLex.l"
{ BEGIN 0; }       
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "vlpLex.l"
{ (LY->colNo)++; continue; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 190 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; continue; }             
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "vlpLex.l"
{ BEGIN MARKED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 192 "vlpLex.l"
{ BEGIN 0; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 193 "vlpLex.l"
{ continue; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 194 "vlpLex.l"
{ continue; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 195 "vlpLex.l"
{ continue; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 197 "vlpLex.l"
{ if (LY->scopeState == MODULE) 
                        { BEGIN 0; LY->vLibComment = true; return YYINPUT; } }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 199 "vlpLex.l"
{ if (LY->scopeState == MODULE) 
                        { BEGIN 0; LY->vLibComment = true; return YYOUTPUT; } }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 201 "vlpLex.l"
{ if (LY->scopeState == MODULE) 
                        { BEGIN 0; LY->vLibComment = true; return YYINOUT; } }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 203 "vlpLex.l"
{ if (LY->scopeState == MODULE) 
                        { BEGIN 0; LY->vLibComment = true; return YYPARAMETER; } }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 205 "vlpLex.l"
{ BEGIN 0; LY->modStart = false; return YYENDMODULE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 206 "vlpLex.l"
{ continue; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 207 "vlpLex.l"
{ (LY->lineNo)++; LY->colNo = 1; continue; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 209 "vlpLex.l"
{ (LY->colNo)+=2; return YYGEQ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 210 "vlpLex.l"
{ (LY->colNo)+=2; return YYLEQ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 211 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGAND; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 212 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGOR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 213 "vlpLex.l"
{ (LY->colNo)+=3; return YYCASEEQUALITY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 214 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGEQUALITY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "vlpLex.l"
{ (LY->colNo)+=3; return YYCASEINEQUALITY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 216 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGINEQUALITY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGXNOR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 218 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGXNOR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 219 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGNAND; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 220 "vlpLex.l"
{ (LY->colNo)+=2; return YYLOGNOR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 221 "vlpLex.l"
{ (LY->colNo)+=2; return YYLSHIFT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 222 "vlpLex.l"
{ (LY->colNo)+=2; return YYRSHIFT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 223 "vlpLex.l"
{ cerr << "No supply conditional" << endl;/*return YYCONDITIONAL;*/ }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 224 "vlpLex.l"
{ cerr << "No supply string" << endl;/*return YYSTRING;*/ }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 226 "vlpLex.l"
{ (LY->colNo)+=6; return YYALWAYS; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 227 "vlpLex.l"
{ /*return YYALLPATH;*/ }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 228 "vlpLex.l"
{ (LY->colNo)+=3; return YYAND; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 229 "vlpLex.l"
{ (LY->colNo)+=6; return YYASSIGN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 230 "vlpLex.l"
{ (LY->colNo)+=5; return YYBEGIN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 231 "vlpLex.l"
{ (LY->colNo)+=3; return YYBUF; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 232 "vlpLex.l"
{ (LY->colNo)+=6; return YYBUFIF0; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 233 "vlpLex.l"
{ (LY->colNo)+=6; return YYBUFIF1; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 234 "vlpLex.l"
{ (LY->colNo)+=4; return YYCASE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 235 "vlpLex.l"
{ (LY->colNo)+=5; return YYCASEX; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 236 "vlpLex.l"
{ (LY->colNo)+=5; return YYCASEZ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 237 "vlpLex.l"
{ /*return YYCMOS;*/ }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 238 "vlpLex.l"
{ /*return YYDEASSIGN;*/ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 239 "vlpLex.l"
{ (LY->colNo)+=7; return YYDEFAULT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 240 "vlpLex.l"
{ (LY->colNo)+=8; return YYDEFPARAM; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 241 "vlpLex.l"
{ /*return YYDISABLE;*/ }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 242 "vlpLex.l"
{ (LY->colNo)+=4; return YYEDGE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 243 "vlpLex.l"
{ (LY->colNo)+=4; return YYELSE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 244 "vlpLex.l"
{ (LY->colNo)+=3; return YYEND; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 245 "vlpLex.l"
{ (LY->colNo)+=7; return YYENDCASE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 246 "vlpLex.l"
{ (LY->colNo)+=11; return YYENDFUNCTION; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 247 "vlpLex.l"
{ (LY->colNo)+=9; return YYENDMODULE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 248 "vlpLex.l"
{ /*return YYENDPRIMITIVE;*/ }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 249 "vlpLex.l"
{ /*return YYENDSPECIFY;*/ }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 250 "vlpLex.l"
{ /*scan_table = 0; return YYENDTABLE;*/ }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 251 "vlpLex.l"
{ (LY->colNo)+=7; return YYENDTASK; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 252 "vlpLex.l"
{ /*return YYEVENT;*/ }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 253 "vlpLex.l"
{ (LY->colNo)+=3; return YYFOR; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 254 "vlpLex.l"
{ /*return YYFOREVER;*/ }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 255 "vlpLex.l"
{ /*return YYFORK;*/ }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 256 "vlpLex.l"
{ (LY->colNo)+=8; return YYFUNCTION; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 257 "vlpLex.l"
{ (LY->colNo)+=6; return YYHIGHZ0; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 258 "vlpLex.l"
{ (LY->colNo)+=6; return YYHIGHZ1; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 259 "vlpLex.l"
{ (LY->colNo)+=2; return YYIF; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 260 "vlpLex.l"
{ /*return YYINITIAL;*/ }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 261 "vlpLex.l"
{ (LY->colNo)+=5; return YYINOUT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 262 "vlpLex.l"
{ (LY->colNo)+=5; return YYINPUT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 263 "vlpLex.l"
{ (LY->colNo)+=7; return YYINTEGER; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 264 "vlpLex.l"
{ /*return YYJOIN;*/ }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 265 "vlpLex.l"
{ /*return YYLARGE;*/ }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 266 "vlpLex.l"
{ /*return YYLEADTO;*/ }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 267 "vlpLex.l"
{ /*return YYMACROMODULE;*/ }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 268 "vlpLex.l"
{ /*return YYMEDIUM;*/ }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 269 "vlpLex.l"
{ 
                     if (LY->blackBox == true) {
                        LY->vLibComment = true;
                        LY->modStart = true;
                     }
                     (LY->colNo)+=6; return YYMODULE; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 275 "vlpLex.l"
{ /*return YYMREG;*/ }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 276 "vlpLex.l"
{ (LY->colNo)+=2; return YYNBASSIGN;  }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "vlpLex.l"
{ (LY->colNo)+=4; return YYNAND; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 278 "vlpLex.l"
{ (LY->colNo)+=7; return YYNEGEDGE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 279 "vlpLex.l"
{ /*return YYNMOS;*/ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 280 "vlpLex.l"
{ (LY->colNo)+=3; return YYNOR; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 281 "vlpLex.l"
{ (LY->colNo)+=3; return YYNOT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 282 "vlpLex.l"
{ /*return YYNOTIF0;*/ }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 283 "vlpLex.l"
{ /*return YYNOTIF1;*/ }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 284 "vlpLex.l"
{ (LY->colNo)+=2; return YYOR; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 285 "vlpLex.l"
{ (LY->colNo)+=6; return YYOUTPUT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 286 "vlpLex.l"
{ (LY->colNo)+=9; return YYPARAMETER; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 287 "vlpLex.l"
{ /*return YYPMOS;*/ }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 288 "vlpLex.l"
{ (LY->colNo)+=7; return YYPOSEDGE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 289 "vlpLex.l"
{ /*return YYPRIMITIVE;*/ }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 290 "vlpLex.l"
{ (LY->colNo)+=5; return YYPULL0; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 291 "vlpLex.l"
{ (LY->colNo)+=5; return YYPULL1; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 292 "vlpLex.l"
{ /*return YYPULLDOWN;*/ }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 293 "vlpLex.l"
{ /*return YYPULLUP;*/ }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 294 "vlpLex.l"
{ /*return YYRCMOS;*/ }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 295 "vlpLex.l"
{ /*return YYREAL;*/ }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 296 "vlpLex.l"
{ (LY->colNo)+=3; return YYREG; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 297 "vlpLex.l"
{ /*return YYREPEAT;*/ }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 298 "vlpLex.l"
{ /*return YYRIGHTARROW;*/ }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 299 "vlpLex.l"
{ /*return YYRNMOS;*/ }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 300 "vlpLex.l"
{ /*return YYRPMOS;*/ }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 301 "vlpLex.l"
{ /*return YYRTRAN;*/ }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 302 "vlpLex.l"
{ /*return YYRTRANIF0;*/ }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 303 "vlpLex.l"
{ /*return YYRTRANIF1;*/ }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 304 "vlpLex.l"
{ /*return YYSCALARED;*/ }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 305 "vlpLex.l"
{ /*return YYSMALL;*/ }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 306 "vlpLex.l"
{ /*return YYSPECIFY;*/ }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 307 "vlpLex.l"
{ /*return YYSPECPARAM;*/ }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 308 "vlpLex.l"
{ (LY->colNo)+=7; return YYSTRONG0; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 309 "vlpLex.l"
{ (LY->colNo)+=7; return YYSTRONG1; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 310 "vlpLex.l"
{ (LY->colNo)+=7; return YYSUPPLY0; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 311 "vlpLex.l"
{ (LY->colNo)+=7; return YYSUPPLY1; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 312 "vlpLex.l"
{ (LY->colNo)+=5; return YYSWIRE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 313 "vlpLex.l"
{ /*scan_table = 1; return YYTABLE;*/ }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 314 "vlpLex.l"
{ (LY->colNo)+=4; return YYTASK; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 315 "vlpLex.l"
{ /*return YYTIME;*/ }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 316 "vlpLex.l"
{ /*return YYTRAN;*/ }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 317 "vlpLex.l"
{ /*return YYTRANIF0;*/ }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 318 "vlpLex.l"
{ /*return YYTRANIF1;*/ }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 319 "vlpLex.l"
{ (LY->colNo)+=3; return YYTRI; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 320 "vlpLex.l"
{ (LY->colNo)+=4; return YYTRI0; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 321 "vlpLex.l"
{ (LY->colNo)+=4; return YYTRI1; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 322 "vlpLex.l"
{ (LY->colNo)+=6; return YYTRIAND; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 323 "vlpLex.l"
{ (LY->colNo)+=5; return YYTRIOR; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 324 "vlpLex.l"
{ /*return YYVECTORED;*/ }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 325 "vlpLex.l"
{ /*return YYWAIT;*/ }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 326 "vlpLex.l"
{ (LY->colNo)+=4; return YYWAND; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 327 "vlpLex.l"
{ (LY->colNo)+=5; return YYWEAK0; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 328 "vlpLex.l"
{ (LY->colNo)+=5; return YYWEAK1; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 329 "vlpLex.l"
{ /*return YYWHILE;*/ }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 330 "vlpLex.l"
{ (LY->colNo)+=4; return YYWIRE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 331 "vlpLex.l"
{ (LY->colNo)+=3; return YYWOR; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 332 "vlpLex.l"
{ (LY->colNo)+=4; return YYXNOR; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 333 "vlpLex.l"
{ (LY->colNo)+=3; return YYXOR; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 335 "vlpLex.l"
{ cerr << "Error: no supply $setup" << endl;/*return YYsysSETUP;*/ }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 336 "vlpLex.l"
{ cerr << "Error: no supply ${Alpha}+" << endl;/*return YYsysID;*/ }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 337 "vlpLex.l"
{  
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = yytext+1; //ignore the char '`'
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYDEF_ID;
                      }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 345 "vlpLex.l"
{
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = yytext;
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYID;
                      }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 353 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = yytext;
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYID;
                      }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 362 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYRNUMBER; 
                      }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 368 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);                                       
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYRNUMBER; 
                      }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 374 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         //yylval->ival = atoi(yytext);
                         yylval.ival = atoi(yytext);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYINUMBER;  
                      }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 382 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = processWhite(yytext);
                         //yylval->stringPtr = &yyid;
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYBIT_BASE_STRING; 
                      }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 391 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = processWhite(yytext);
                         //yylval->stringPtr = &yyid;
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYBIT_BASE_STRING; 
                      }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 400 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = processWhite(yytext);
                         //yylval->stringPtr = &yyid;
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYBIT_BASE_STRING; 
                      }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 409 "vlpLex.l"
{ 
                         (LY->colNo) = (LY->colNo) + strlen(yytext);               
                         LY->yyid = processWhite(yytext);
                         //yylval->stringPtr = &yyid;
                         yylval.stringPtr = &(LY->yyid);
                         if (LY->defState)
                            (LY->defCount)++;
                         return YYBIT_BASE_STRING; 
                      }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 418 "vlpLex.l"
{ 
                        (LY->colNo)++;
                        if (LY->blackBox == true && yytext[0] == ';') {
                           LY->vLibComment = false;
                           BEGIN LIBRARY;
                        }
                        return yytext[0]; 
                      }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 428 "vlpLex.l"
ECHO;
	YY_BREAK
#line 2337 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT_L):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(IFDEF):
case YY_STATE_EOF(MARKED):
case YY_STATE_EOF(MARKED_S):
case YY_STATE_EOF(DIRECTIVE):
case YY_STATE_EOF(DIRECTIVE_L):
case YY_STATE_EOF(TRAN_OFF):
case YY_STATE_EOF(TRAN_OFF_L):
case YY_STATE_EOF(LIBRARY):
case YY_STATE_EOF(DEFINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 742 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 742 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 741);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 428 "vlpLex.l"


int yywrap()
{
   //cout << "file end : yywrap()" << endl;
   if (!(LY->FileNameStack.empty())) {
      if (LY->isInclude == true) {
         LY->FileNameStack.pop(); LY->isInclude = false;
			//Msg(MSG_IFO) << " > Parsing Verilog File : " << getAbsPath(LY->FileNameStack.top().c_str()) << " ..."<< endl;
      }
      else LY->FileNameStack.pop();
   }
   if (LY->FILEStack.size() != 0)
   {
      yyin = LY->FILEStack.top();
      LY->FILEStack.pop();
      LY->lineNo = LY->LNStack.top();
      LY->LNStack.pop();
      (LY->colNo) = LY->CNStack.top();
      LY->CNStack.pop();
      yy_delete_buffer(YY_CURRENT_BUFFER);
      yy_switch_to_buffer(LY->LexBufStack.top());
      LY->LexBufStack.pop();
      return 0;
/*no use STL
      yyin = LY->FILEStack.pop();
      LY->lineNo = LY->LNStack.pop();
      (LY->colNo) = LY->CNStack.pop();
      yy_delete_buffer(YY_CURRENT_BUFFER);
      yy_switch_to_buffer(LY->LexBufStack.pop());
      return 0;
*/
   }
   else
      return 1;
}

bool isWhite(char ch) 
{
   return (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '\b'); 
}

void eatWhite(char*& str) 
{
   while (isWhite(*str) && *(++str) != 0); 
}

void seekWhite(char*& next) 
{
   while (!isWhite(*next) && *next != 0) ++next; 
}

char* getString(char* const str)
{
   assert(!isWhite(*str));
   if (*str == 0)
      return 0;
   char* next = str;
   seekWhite(next);
   if (*next == 0)    //The end of a line
      return 0;
   *next = 0;
   ++next;
   eatWhite(next);
   if (*next == 0)
      return 0;
   return next;
}

char* processWhite(char* const str)
{
   char* returnStr = str;
   char* next = getString(returnStr);
   if (next != 0)
   {
      char* tmp = returnStr;
      returnStr = new char[strlen(tmp)+strlen(next)];
      strcpy(returnStr, tmp);
      strcat(returnStr, next);
   }
   return returnStr;
}

void parseInclude(const char* file)
{
   string fileName = file;

   LY->FILEStack.push(yyin);
   LY->LNStack.push(LY->lineNo);
   LY->CNStack.push((LY->colNo));
   LY->LexBufStack.push(YY_CURRENT_BUFFER);
   LY->FileNameStack.push(file);
   LY->isInclude = true;

   yyin = fopen(file, "r");
   LY->lineNo = 1;
   (LY->colNo) = 1;

   if (!yyin)
   {
      fprintf(stderr,"could not open %s\n",file);
      exit(1);
   }
   YY_BUFFER_STATE newBuf = yy_create_buffer(yyin, YY_BUF_SIZE);
   yy_switch_to_buffer(newBuf);
	Msg(MSG_IFO) << " > Parsing (Included) Verilog File : " << getAbsPath(fileName.c_str()) << " ..."<< endl;
}

